latest refresh token and access token architecture:
-----------------------------------------------------------------------------------------------

access token: stored in memory, and expires in 15 min
refresh token: stored in http-only, expires in 7 days

user signs up
 - assigned refresh token, stored in http-only mapped to refresh endpoint
 - assigned access token, stored in memory
 - client makes next request to pull data to show first page. 
user makes new request
 - access token is sent with each request, in a headers
user logs in 
 - new refresh token
 - new access token
 - makes first request for paint
user makes request with expired access token
 - 401 received, client calls /refresh
    two outcomes: 
      -- 200 OK: sets new access token, recalls request
      -- 401 Unauthed means refresh is expired, user needs to reauthenticate, log user out. 

-----------------------------------------------------------------------------------------------

signup flow:
- user goes to signup, posts to backend, backend returns access + refresh token, 
- frontend stores this, frontend makes home request

normal flow:
- user requests home, frontend tries to call home, gets 401, posts to refresh, gets access, retries home, loads home

expired refresh flow:
- user requests home, frontend tries to call home, gets 401, posts to refresh, gets 401, redirects to login

login flow:
- user posts login, backend returns access + refresh token, frontend stores this, frontend makes home request






Old:

1. user logs in, gets new refresh and access tokens
2. client stores refresh token inside http-only cookie, mapped only to auth/refresh path.
3. client stores access token inside memory
4. if 401 on any request - call refresh token, set new access token - recall request


new user
 - no auth in cookies
1. Try to load user /self endpoint(returns user that lives inside access token)
2a. fails with 401, try refresh
  2i. refresh returns 200, token
     - set token, try to load user(/self) again
  2ii. refresh fails with 401
     - route to login
2b. succeeds, proceed to calling all other endpoint


existing user
 - auth exists inside cookies
 1. Try to load user /self endpoint
 2a. succeeds, proceed with other calls
 2b. fails
    - try refresh
      - succeeds, recall /self
      - fails, route to login. 


logged in user:
- auth exists inside cookie but expires
1. call endpoint
2. receive 401
3. attempt refresh: post to /refresh
 3a. new access token received, retry previous request
 3b. fails, user must re-auth at login 


store both tokens inside http-only:
 access-token - http-only
 refresh-token - http-only, path=/refresh, exp(for now it will be a session cookie[user logs in each time], in future I can persist this)

requests still post cookies - still vuln to csrf



CSRF prevention:

generate csrf token with:
require('crypto').randomBytes(16, function(err, buffer) {
  var token = buffer.toString('hex');
});

server creates a csrf token with each new user
 - stores in db

- /self(first request made by frontend) returns a csrf token in the payload
1. set csrf token in the client side user(var in memory)
2. add csrf token with all requests(if exists, which it should if user is logged in) etc inside custom headers

- create server middleware 
runs after user middleware, compares csrf token in request vs the one stored on the user. 

